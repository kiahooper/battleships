{"version":3,"sources":["main.f1c508fb.chunk.css","webpack://src/styles/Accordion.scss","webpack://src/styles/_animations.scss","webpack://src/styles/_variables.scss","webpack://src/styles/_infoBoard.scss","webpack://src/styles/_mixins.scss","webpack://node_modules/include-media/dist/_include-media.scss","webpack://src/styles/_gameboards.scss","webpack://src/styles/_placeShips.scss","webpack://src/styles/playAgain.scss","webpack://src/styles/App.scss"],"names":[],"mappings":"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","file":"main.f1c508fb.chunk.css","sourcesContent":["@import url(https://fonts.googleapis.com/css2?family=Black+Ops+One&family=Orbitron&display=swap);\n.accordion{display:-webkit-flex;display:flex;-webkit-flex-direction:column;flex-direction:column;margin:0 auto;width:100%;height:-webkit-fit-content;height:-moz-fit-content;height:fit-content}.accordion .title{padding:1%;display:-webkit-flex;display:flex;-webkit-justify-content:center;justify-content:center;-webkit-align-items:center;align-items:center;cursor:pointer}.accordion .title h2{margin:0 2%}.accordion .content{height:0;opacity:0;overflow:hidden;transition:all 0.3s ease-in}.accordion .content.active{height:-webkit-fit-content;height:-moz-fit-content;height:fit-content;opacity:1;padding:4%}\n\n@-webkit-keyframes typing{from{width:0}to{width:100%}}@keyframes typing{from{width:0}to{width:100%}}@-webkit-keyframes blink-caret{from,to{border-color:transparent}50%{border-color:#00ff2a}}@keyframes blink-caret{from,to{border-color:transparent}50%{border-color:#00ff2a}}@-webkit-keyframes monitorGlow{from,to{box-shadow:0 0 0.4em inset #00ff2a}50%{box-shadow:0 0 0.6em inset #00ff2a}}@keyframes monitorGlow{from,to{box-shadow:0 0 0.4em inset #00ff2a}50%{box-shadow:0 0 0.6em inset #00ff2a}}.infoBoard{border-top:.6vw solid #2d343b;border-bottom:.6vw solid #718190;border-left:.6vw solid #444e57;border-right:.6vw solid #444e57;background:black;padding:1%;margin:0 auto;width:40%;height:-webkit-min-content;height:min-content;border-radius:3px 3px 3px 3px}@media (max-width: 1025px){.infoBoard{width:50%}}@media (max-width: 425px){.infoBoard{width:90%}}.infoBoard h2{text-transform:unset;box-sizing:border-box;max-width:-webkit-min-content;max-width:min-content;overflow:hidden;border-right:0.15em solid #00ff2a;white-space:nowrap;margin:0 auto;letter-spacing:0.15em;-webkit-animation:typing 1s steps(20),blink-caret 0.75s infinite;animation:typing 1s steps(20),blink-caret 0.75s infinite}.gameboards{display:-webkit-flex;display:flex;-webkit-justify-content:center;justify-content:center;-webkit-align-items:center;align-items:center;margin:2%}@media (max-width: 768px){.gameboards{-webkit-flex-direction:column;flex-direction:column}}@media (max-width: 1024){.gameboards{width:-webkit-fit-content;width:-moz-fit-content;width:fit-content}}.gameboards .gameRules{justify-self:stretch;background-color:#2c2c2c;padding:1.5%;margin:2%;min-width:250px;width:-webkit-min-content;width:min-content;border-radius:3px 3px 3px 3px;box-shadow:-3px 4px 15px -3px rgba(0,0,0,0.6)}.gameboards .gameRules p{margin:2%}.gameboards .gameRules div .bold{font-weight:bolder}.gameboards .gameRules div .red{color:red}.gameboards .gameRules div .blue{color:blue}.gameboards .gameRules div .green{color:green}.gameboards .computer{border-top:.8vw solid #f20505;border-bottom:.8vw solid #5c0202;border-left:.8vw solid #8e0303;border-right:.8vw solid #8e0303;background-color:#c00404}.gameboard{border-top:.8vw solid #4ac6ff;border-bottom:.8vw solid #0079b0;border-left:.8vw solid #009ce3;border-right:.8vw solid #009ce3;margin:0;width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;background-color:#17b6ff;padding:1.5%;border-radius:5px 5px 5px 5px}@media (max-width: 320px){.gameboard{padding:1vh}}.gameboard .grid{height:-webkit-min-content;height:min-content;width:-webkit-min-content;width:min-content;display:grid;grid-template-columns:repeat(10, 4vh);cursor:crosshair}@media (max-width: 1025px){.gameboard .grid{grid-template-columns:repeat(10, 3vh)}}.gameboard .grid .ship{color:transparent;background-color:orange}.gameboard .grid .hit{color:transparent;background-color:red}.gameboard .grid .miss{color:transparent;background-color:#3437e6}.gameboard .grid .sunk{color:transparent;background-color:green}.gameboard .grid div{display:-webkit-flex;display:flex;-webkit-justify-content:center;justify-content:center;-webkit-align-items:center;align-items:center;box-shadow:0 0 0.3em inset .gameboard .grid div gridGreen;background-color:black;height:4vh;border:0.1em solid #00ff2a;-webkit-animation:monitorGlow 0.4s steps(100) infinite;animation:monitorGlow 0.4s steps(100) infinite}@media (max-width: 1025px){.gameboard .grid div{height:3vh}}@media (min-width: 426px){.gameboard .grid div:hover{background-color:#00ff2a}}.placeShips{display:-webkit-flex;display:flex;-webkit-justify-content:center;justify-content:center;-webkit-align-items:center;align-items:center;width:-webkit-min-content;width:min-content;margin:3% auto}@media (max-width: 425px){.placeShips{-webkit-flex-direction:column;flex-direction:column}}.placeShips .placeShipsInfo{background-color:#2c2c2c;height:-webkit-max-content;height:max-content;padding:4%;border-radius:5px 0 0 5px;box-shadow:inset -7px 0 10px -7px rgba(0,0,0,0.7),-3px 4px 15px -3px rgba(0,0,0,0.6)}@media (max-width: 425px){.placeShips .placeShipsInfo{width:85%;border-radius:5px 5px 0 0;box-shadow:inset 0 -7px 10px -7px rgba(0,0,0,0.8),-3px 4px 15px -3px rgba(0,0,0,0.6)}}.placeShips .placeShipsInfo .ships{margin:1%}.placeShips .placeShipsInfo .ships .ship{display:-webkit-flex;display:flex;-webkit-justify-content:center;justify-content:center;-webkit-align-items:flex-end;align-items:flex-end;margin-top:1vh;position:relative;width:-webkit-min-content;width:min-content}.placeShips .placeShipsInfo .ships .ship .shipItem{color:transparent;border:0.1rem solid white;background-color:lightgray;width:4vh;height:4vh}@media (max-width: 425px){.placeShips .placeShipsInfo .ships .ship .shipItem{width:2.5vh;height:2.5vh}}.placeShips .placeShipsInfo .ships .ship .currentShip{-webkit-transform:scale(1.1);transform:scale(1.1);background-color:orange;box-shadow:0 0 0.3rem white,0 0 0.3rem inset white}.placeShips .placeShipsInfo .ships .ship .shipName{display:-webkit-flex;display:flex;-webkit-justify-content:center;justify-content:center;-webkit-align-items:center;align-items:center;position:absolute;z-index:99999;height:100%;width:100%;color:transparent}.placeShips .placeShipsInfo .ships .ship .shipName:hover{background-color:rgba(0,0,0,0.6);color:white}.placeShips .placeShipsInfo .ships .ship .shipName p{text-transform:uppercase;letter-spacing:0.05rem;font-size:0.7rem}.placeShips .placeShipsInfo .ships .ship img{position:absolute;z-index:99999;max-height:100%;max-width:100%}.placeShips button{width:100%;margin-top:2%;position:relative;z-index:1;overflow:hidden}.placeShips button::after{content:\"\";background:#1a1a1a;position:absolute;z-index:-1;display:block;transition:all 0.35s}.placeShips button[class^=\"slide\"]:hover::after{left:0;right:0;top:0;bottom:0;transition:all 0.35s}.placeShips button.slide_horizontal::after{top:0;bottom:0;left:-100%;right:100%}.placeShips button.slide_vertical::after{left:0;right:0;top:100%;bottom:-100%}.overlay{display:none;background-color:rgba(0,0,0,0.6);width:100vw;height:100vh;top:0;left:0;position:fixed;z-index:9999}.overlay .playAgain{border-radius:5px 5px 5px 5px;margin:0 auto;background-color:#2c2c2c;padding:4%;width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;position:absolute;left:50%;top:50%;-webkit-transform:translate(-50%, -50%);transform:translate(-50%, -50%)}.overlay .playAgain button{margin:0 2% 0 2%}.overlay .playAgain button:hover{-webkit-transform:scale(1.1);transform:scale(1.1)}.show{display:block}html,body{height:100vh;width:100vw;margin:0;background:radial-gradient(circle at center, #3437e6, black)}.app{font-family:\"Orbitron\",sans-serif;box-sizing:border-box;text-align:center;color:white}div{margin:0}h1{font-family:\"Black Ops One\",sans-serif;font-size:9.2vw;text-transform:uppercase;margin:0;background:-webkit-linear-gradient(#e1ff5c, #c21212);background-clip:text;-webkit-background-clip:text;-webkit-text-fill-color:transparent;-webkit-text-stroke:0.01em black}h2{letter-spacing:0.1em;font-size:20px;margin:0;text-transform:uppercase;margin-bottom:1vw}@media (min-width: 426px) and (max-width: 1024px){h2{font-size:14px}}@media (max-width: 425px){h2{font-size:10px}}p{margin:0;font-size:16px}@media (max-width: 1024px){p{font-size:10px}}button{height:-webkit-min-content;height:min-content;text-transform:uppercase;font-family:\"Orbitron\",sans-serif;font-size:16px;padding:2%;color:white;background-color:#2c2c2c;border-top:.3rem solid #464646;border-bottom:.3rem solid #000;border-left:.3rem solid #131313;border-right:.3rem solid #131313;outline:none}button:hover{cursor:pointer;color:orange}\n\n","@import \"./mixins\";\r\n\r\n.accordion {\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin: 0 auto;\r\n  width: 100%;\r\n  height: fit-content;\r\n  .title {\r\n    h2 {\r\n      margin: 0 2%;\r\n    }\r\n    padding: 1%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    cursor: pointer;\r\n  }\r\n\r\n  .content {\r\n    height: 0;\r\n    opacity: 0;\r\n    overflow: hidden;\r\n    transition: all 0.3s ease-in;\r\n  }\r\n\r\n  .content.active {\r\n    height: fit-content;\r\n    opacity: 1;\r\n    padding: 4%;\r\n  }\r\n}\r\n","/* The typing effect */\r\n@keyframes typing {\r\n  from {\r\n    width: 0;\r\n  }\r\n  to {\r\n    width: 100%;\r\n  }\r\n}\r\n\r\n/* The typewriter cursor effect */\r\n@keyframes blink-caret {\r\n  from,\r\n  to {\r\n    border-color: transparent;\r\n  }\r\n  50% {\r\n    border-color: $gridGreen;\r\n  }\r\n}\r\n\r\n/* The slight monitor flare effect */\r\n@keyframes monitorGlow {\r\n  from,\r\n  to {\r\n    box-shadow: 0 0 0.4em inset $gridGreen;\r\n  }\r\n  50% {\r\n    box-shadow: 0 0 0.6em inset $gridGreen;\r\n  }\r\n}\r\n","@import url(\"https://fonts.googleapis.com/css2?family=Black+Ops+One&family=Orbitron&display=swap\");\r\n\r\n$bckgrndClr: #3437e6;\r\n$gameboardBckgrnd: #17b6ff;\r\n$gridGreen: rgb(0, 255, 42);\r\n$infoGrey: rgb(44, 44, 44);\r\n$mainFont: \"Orbitron\", sans-serif;\r\n$headlineFont: \"Black Ops One\", sans-serif;\r\n","@import \"/node_modules/include-media/dist/_include-media.scss\";\r\n\r\n.infoBoard {\r\n  @include shadedBorders(0.6vw, rgb(90, 103, 116), invert);\r\n  background: black;\r\n  padding: 1%;\r\n  margin: 0 auto;\r\n  width: 40%;\r\n  @include media(\"<=1025px\") {\r\n    width: 50%;\r\n  }\r\n  @include media(\"<=425px\") {\r\n    width: 90%;\r\n  }\r\n  height: min-content;\r\n  @include borderRadius(3px);\r\n\r\n  h2 {\r\n    text-transform: unset;\r\n    box-sizing: border-box;\r\n    max-width: min-content;\r\n    overflow: hidden; /* Ensures the content is not revealed until the animation */\r\n    border-right: 0.15em solid $gridGreen; /* The typwriter cursor */\r\n    white-space: nowrap; /* Keeps the content on a single line */\r\n    margin: 0 auto; /* Gives that scrolling effect as the typing happens */\r\n    letter-spacing: 0.15em; /* Adjust as needed */\r\n    animation: typing 1s steps(20), blink-caret 0.75s infinite;\r\n  }\r\n}\r\n","@mixin flexBox($justify, $align) {\r\n  display: flex;\r\n  justify-content: $justify;\r\n  align-items: $align;\r\n}\r\n\r\n@mixin shadedBorders($thickness, $baseColor, $invert: false) {\r\n  @if $invert {\r\n    border-top: $thickness solid darken($baseColor, 20%);\r\n    border-bottom: $thickness solid lighten($baseColor, 10%);\r\n  } @else {\r\n    border-top: $thickness solid lighten($baseColor, 10%);\r\n    border-bottom: $thickness solid darken($baseColor, 20%);\r\n  }\r\n  border-left: $thickness solid darken($baseColor, 10%);\r\n  border-right: $thickness solid darken($baseColor, 10%);\r\n}\r\n\r\n@mixin boxShadow($params...) {\r\n  -webkit-box-shadow: $params;\r\n  -moz-box-shadow: $params;\r\n  box-shadow: $params;\r\n}\r\n\r\n@mixin borderRadius(\r\n  $topLeft,\r\n  $topRight: $topLeft,\r\n  $bottomRight: $topLeft,\r\n  $bottomLeft: $topLeft\r\n) {\r\n  -webkit-border-radius: $topLeft $topRight $bottomRight $bottomLeft;\r\n  -moz-border-radius: $topLeft $topRight $bottomRight $bottomLeft;\r\n  border-radius: $topLeft $topRight $bottomRight $bottomLeft;\r\n}\r\n","@charset \"UTF-8\";\n\n//     _            _           _                           _ _\n//    (_)          | |         | |                         | (_)\n//     _ _ __   ___| |_   _  __| | ___   _ __ ___   ___  __| |_  __ _\n//    | | '_ \\ / __| | | | |/ _` |/ _ \\ | '_ ` _ \\ / _ \\/ _` | |/ _` |\n//    | | | | | (__| | |_| | (_| |  __/ | | | | | |  __/ (_| | | (_| |\n//    |_|_| |_|\\___|_|\\__,_|\\__,_|\\___| |_| |_| |_|\\___|\\__,_|_|\\__,_|\n//\n//      Simple, elegant and maintainable media queries in Sass\n//                        v1.4.9\n//\n//        https://eduardoboucas.github.io/include-media\n//\n//         Authors: Eduardo Boucas (@eduardoboucas)\n//                  Kitty Giraudel (@kittygiraudel)\n//\n//      This project is licensed under the terms of the MIT license\n////\n/// include-media library public configuration\n/// @author Eduardo Boucas\n/// @access public\n////\n\n\n///\n/// Creates a list of global breakpoints\n///\n/// @example scss - Creates a single breakpoint with the label `phone`\n///  $breakpoints: ('phone': 320px);\n///\n$breakpoints: (\n  'phone': 320px,\n  'tablet': 768px,\n  'desktop': 1024px\n) !default;\n\n\n///\n/// Creates a list of static expressions or media types\n///\n/// @example scss - Creates a single media type (screen)\n///  $media-expressions: ('screen': 'screen');\n///\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\n///  $media-expressions: (\n///    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)'\n///  );\n///\n$media-expressions: (\n  'screen': 'screen',\n  'print': 'print',\n  'handheld': 'handheld',\n  'landscape': '(orientation: landscape)',\n  'portrait': '(orientation: portrait)',\n  'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)',\n  'retina3x': '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)'\n) !default;\n\n\n///\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\n///\n/// @example scss - Interval for pixels is defined as `1` by default\n///  @include media('>128px') {}\n///\n///  /* Generates: */\n///  @media (min-width: 129px) {}\n///\n/// @example scss - Interval for ems is defined as `0.01` by default\n///  @include media('>20em') {}\n///\n///  /* Generates: */\n///  @media (min-width: 20.01em) {}\n///\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\n///  @include media('>2.0rem') {}\n///\n///  /* Generates: */\n///  @media (min-width: 2.1rem) {}\n///\n$unit-intervals: (\n  'px': 1,\n  'em': 0.01,\n  'rem': 0.1,\n  '': 0\n) !default;\n\n///\n/// Defines whether support for media queries is available, useful for creating separate stylesheets\n/// for browsers that don't support media queries.\n///\n/// @example scss - Disables support for media queries\n///  $im-media-support: false;\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n$im-media-support: true !default;\n\n///\n/// Selects which breakpoint to emulate when support for media queries is disabled. Media queries that start at or\n/// intercept the breakpoint will be displayed, any others will be ignored.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n/// @example scss - This media query will NOT show because it does not intercept the desktop breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'tablet';\n///  @include media('>=desktop') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-breakpoint: 'desktop' !default;\n\n///\n/// Selects which media expressions are allowed in an expression for it to be used when media queries\n/// are not supported.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint and contains only accepted media expressions\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'screen') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///   /* Generates: */\n///   .foo {\n///     color: tomato;\n///   }\n///\n/// @example scss - This media query will NOT show because it intercepts the static breakpoint but contains a media expression that is not accepted\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'retina2x') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-expressions: ('screen', 'portrait', 'landscape') !default;\n\n////\n/// Cross-engine logging engine\n/// @author Kitty Giraudel\n/// @access private\n////\n\n\n///\n/// Log a message either with `@error` if supported\n/// else with `@warn`, using `feature-exists('at-error')`\n/// to detect support.\n///\n/// @param {String} $message - Message to log\n///\n@function im-log($message) {\n  @if feature-exists('at-error') {\n    @error $message;\n  } @else {\n    @warn $message;\n    $_: noop();\n  }\n\n  @return $message;\n}\n\n\n///\n/// Wrapper mixin for the log function so it can be used with a more friendly\n/// API than `@if im-log('..') {}` or `$_: im-log('..')`. Basically, use the function\n/// within functions because it is not possible to include a mixin in a function\n/// and use the mixin everywhere else because it's much more elegant.\n///\n/// @param {String} $message - Message to log\n///\n@mixin log($message) {\n  @if im-log($message) {}\n}\n\n\n///\n/// Function with no `@return` called next to `@warn` in Sass 3.3\n/// to trigger a compiling error and stop the process.\n///\n@function noop() {}\n\n///\n/// Determines whether a list of conditions is intercepted by the static breakpoint.\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @return {Boolean} - Returns true if the conditions are intercepted by the static breakpoint\n///\n@function im-intercepts-static-breakpoint($conditions...) {\n  $no-media-breakpoint-value: map-get($breakpoints, $im-no-media-breakpoint);\n\n  @if not $no-media-breakpoint-value {\n    @if im-log('`#{$im-no-media-breakpoint}` is not a valid breakpoint.') {}\n  }\n\n  @each $condition in $conditions {\n    @if not map-has-key($media-expressions, $condition) {\n      $operator: get-expression-operator($condition);\n      $prefix: get-expression-prefix($operator);\n      $value: get-expression-value($condition, $operator);\n\n      @if ($prefix == 'max' and $value <= $no-media-breakpoint-value) or\n          ($prefix == 'min' and $value > $no-media-breakpoint-value) {\n        @return false;\n      }\n    } @else if not index($im-no-media-expressions, $condition) {\n      @return false;\n    }\n  }\n\n  @return true;\n}\n\n////\n/// Parsing engine\n/// @author Kitty Giraudel\n/// @access private\n////\n\n\n///\n/// Get operator of an expression\n///\n/// @param {String} $expression - Expression to extract operator from\n///\n/// @return {String} - Any of `>=`, `>`, `<=`, `<`, `≥`, `≤`\n///\n@function get-expression-operator($expression) {\n  @each $operator in ('>=', '>', '<=', '<', '≥', '≤') {\n    @if str-index($expression, $operator) {\n      @return $operator;\n    }\n  }\n\n  // It is not possible to include a mixin inside a function, so we have to\n  // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\n  // functions cannot be called anywhere in Sass, we need to hack the call in\n  // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n  // Sass 3.3, change this line in `@if im-log(..) {}` instead.\n  $_: im-log('No operator found in `#{$expression}`.');\n}\n\n\n///\n/// Get dimension of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract dimension from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {String} - `width` or `height` (or potentially anything else)\n///\n@function get-expression-dimension($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $parsed-dimension: str-slice($expression, 0, $operator-index - 1);\n  $dimension: 'width';\n\n  @if str-length($parsed-dimension) > 0 {\n    $dimension: $parsed-dimension;\n  }\n\n  @return $dimension;\n}\n\n\n///\n/// Get dimension prefix based on an operator\n///\n/// @param {String} $operator - Operator\n///\n/// @return {String} - `min` or `max`\n///\n@function get-expression-prefix($operator) {\n  @return if(index(('<', '<=', '≤'), $operator), 'max', 'min');\n}\n\n\n///\n/// Get value of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract value from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {Number} - A numeric value\n///\n@function get-expression-value($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $value: str-slice($expression, $operator-index + str-length($operator));\n\n  @if map-has-key($breakpoints, $value) {\n    $value: map-get($breakpoints, $value);\n  } @else {\n    $value: to-number($value);\n  }\n\n  $interval: map-get($unit-intervals, unit($value));\n\n  @if not $interval {\n    // It is not possible to include a mixin inside a function, so we have to\n    // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\n    // functions cannot be called anywhere in Sass, we need to hack the call in\n    // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n    // Sass 3.3, change this line in `@if im-log(..) {}` instead.\n    $_: im-log('Unknown unit `#{unit($value)}`.');\n  }\n\n  @if $operator == '>' {\n    $value: $value + $interval;\n  } @else if $operator == '<' {\n    $value: $value - $interval;\n  }\n\n  @return $value;\n}\n\n\n///\n/// Parse an expression to return a valid media-query expression\n///\n/// @param {String} $expression - Expression to parse\n///\n/// @return {String} - Valid media query\n///\n@function parse-expression($expression) {\n  // If it is part of $media-expressions, it has no operator\n  // then there is no need to go any further, just return the value\n  @if map-has-key($media-expressions, $expression) {\n    @return map-get($media-expressions, $expression);\n  }\n\n  $operator: get-expression-operator($expression);\n  $dimension: get-expression-dimension($expression, $operator);\n  $prefix: get-expression-prefix($operator);\n  $value: get-expression-value($expression, $operator);\n\n  @return '(#{$prefix}-#{$dimension}: #{$value})';\n}\n\n///\n/// Slice `$list` between `$start` and `$end` indexes\n///\n/// @access private\n///\n/// @param {List} $list - List to slice\n/// @param {Number} $start [1] - Start index\n/// @param {Number} $end [length($list)] - End index\n///\n/// @return {List} Sliced list\n///\n@function slice($list, $start: 1, $end: length($list)) {\n  @if length($list) < 1 or $start > $end {\n    @return ();\n  }\n\n  $result: ();\n\n  @for $i from $start through $end {\n    $result: append($result, nth($list, $i));\n  }\n\n  @return $result;\n}\n\n////\n/// String to number converter\n/// @author Kitty Giraudel\n/// @access private\n////\n\n\n///\n/// Casts a string into a number\n///\n/// @param {String | Number} $value - Value to be parsed\n///\n/// @return {Number}\n///\n@function to-number($value) {\n  @if type-of($value) == 'number' {\n    @return $value;\n  } @else if type-of($value) != 'string' {\n    $_: im-log('Value for `to-number` should be a number or a string.');\n  }\n\n  $first-character: str-slice($value, 1, 1);\n  $result: 0;\n  $digits: 0;\n  $minus: ($first-character == '-');\n  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);\n\n  // Remove +/- sign if present at first character\n  @if ($first-character == '+' or $first-character == '-') {\n    $value: str-slice($value, 2);\n  }\n\n  @for $i from 1 through str-length($value) {\n    $character: str-slice($value, $i, $i);\n\n    @if not (index(map-keys($numbers), $character) or $character == '.') {\n      @return to-length(if($minus, -$result, $result), str-slice($value, $i))\n    }\n\n    @if $character == '.' {\n      $digits: 1;\n    } @else if $digits == 0 {\n      $result: $result * 10 + map-get($numbers, $character);\n    } @else {\n      $digits: $digits * 10;\n      $result: $result + map-get($numbers, $character) / $digits;\n    }\n  }\n\n  @return if($minus, -$result, $result);\n}\n\n\n///\n/// Add `$unit` to `$value`\n///\n/// @param {Number} $value - Value to add unit to\n/// @param {String} $unit - String representation of the unit\n///\n/// @return {Number} - `$value` expressed in `$unit`\n///\n@function to-length($value, $unit) {\n  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);\n\n  @if not index(map-keys($units), $unit) {\n    $_: im-log('Invalid unit `#{$unit}`.');\n  }\n\n  @return $value * map-get($units, $unit);\n}\n\n///\n/// This mixin aims at redefining the configuration just for the scope of\n/// the call. It is helpful when having a component needing an extended\n/// configuration such as custom breakpoints (referred to as tweakpoints)\n/// for instance.\n///\n/// @author Kitty Giraudel\n///\n/// @param {Map} $tweakpoints [()] - Map of tweakpoints to be merged with `$breakpoints`\n/// @param {Map} $tweak-media-expressions [()] - Map of tweaked media expressions to be merged with `$media-expression`\n///\n/// @example scss - Extend the global breakpoints with a tweakpoint\n///  @include media-context(('custom': 678px)) {\n///    .foo {\n///      @include media('>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend the global media expressions with a custom one\n///  @include media-context($tweak-media-expressions: ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend both configuration maps\n///  @include media-context(('custom': 678px), ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {\n  // Save global configuration\n  $global-breakpoints: $breakpoints;\n  $global-media-expressions: $media-expressions;\n\n  // Update global configuration\n  $breakpoints: map-merge($breakpoints, $tweakpoints) !global;\n  $media-expressions: map-merge($media-expressions, $tweak-media-expressions) !global;\n\n  @content;\n\n  // Restore global configuration\n  $breakpoints: $global-breakpoints !global;\n  $media-expressions: $global-media-expressions !global;\n}\n\n////\n/// include-media public exposed API\n/// @author Eduardo Boucas\n/// @access public\n////\n\n\n///\n/// Generates a media query based on a list of conditions\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @example scss - With a single set breakpoint\n///  @include media('>phone') { }\n///\n/// @example scss - With two set breakpoints\n///  @include media('>phone', '<=tablet') { }\n///\n/// @example scss - With custom values\n///  @include media('>=358px', '<850px') { }\n///\n/// @example scss - With set breakpoints with custom values\n///  @include media('>desktop', '<=1350px') { }\n///\n/// @example scss - With a static expression\n///  @include media('retina2x') { }\n///\n/// @example scss - Mixing everything\n///  @include media('>=350px', '<tablet', 'retina3x') { }\n///\n@mixin media($conditions...) {\n  @if ($im-media-support and length($conditions) == 0) or\n      (not $im-media-support and im-intercepts-static-breakpoint($conditions...)) {\n    @content;\n  } @else if ($im-media-support and length($conditions) > 0) {\n    @media #{unquote(parse-expression(nth($conditions, 1)))} {\n      // Recursive call\n      @include media(slice($conditions, 2)...) {\n        @content;\n      }\n    }\n  }\n}\n","@import \"/node_modules/include-media/dist/_include-media.scss\";\r\n\r\n.gameboards {\r\n  @include flexBox(center, center);\r\n  @include media(\"<=768px\") {\r\n    flex-direction: column;\r\n  }\r\n  margin: 2%;\r\n  @include media(\"<=1024\") {\r\n    width: fit-content;\r\n  }\r\n  .gameRules {\r\n    justify-self: stretch;\r\n    background-color: $infoGrey;\r\n    padding: 1.5%;\r\n    margin: 2%;\r\n    min-width: 250px;\r\n    width: min-content;\r\n    @include borderRadius(3px);\r\n    @include boxShadow(-3px 4px 15px -3px rgba(0, 0, 0, 0.6));\r\n    p {\r\n      margin: 2%;\r\n    }\r\n    div {\r\n      .bold {\r\n        font-weight: bolder;\r\n      }\r\n      .red {\r\n        color: red;\r\n      }\r\n      .blue {\r\n        color: blue;\r\n      }\r\n      .green {\r\n        color: green;\r\n      }\r\n    }\r\n  }\r\n\r\n  .computer {\r\n    @include shadedBorders(0.8vw, rgb(192, 4, 4));\r\n    background-color: rgb(192, 4, 4);\r\n  }\r\n}\r\n\r\n.gameboard {\r\n  @include shadedBorders(0.8vw, $gameboardBckgrnd);\r\n  margin: 0;\r\n  width: fit-content;\r\n  background-color: $gameboardBckgrnd;\r\n  padding: 1.5%;\r\n  @include media(\"<=phone\") {\r\n    padding: 1vh;\r\n  }\r\n  @include borderRadius(5px);\r\n  .grid {\r\n    height: min-content;\r\n    width: min-content;\r\n    display: grid;\r\n    grid-template-columns: repeat(10, 4vh);\r\n    @include media(\"<=1025px\") {\r\n      grid-template-columns: repeat(10, 3vh);\r\n    }\r\n    cursor: crosshair;\r\n    .ship {\r\n      color: transparent;\r\n      background-color: orange;\r\n    }\r\n    .hit {\r\n      color: transparent;\r\n      background-color: red;\r\n    }\r\n    .miss {\r\n      color: transparent;\r\n      background-color: $bckgrndClr;\r\n    }\r\n    .sunk {\r\n      color: transparent;\r\n      background-color: green;\r\n    }\r\n\r\n    div {\r\n      @include flexBox(center, center);\r\n      @include boxShadow(0 0 0.3em inset &gridGreen);\r\n      background-color: black;\r\n      height: 4vh;\r\n      @include media(\"<=1025px\") {\r\n        height: 3vh;\r\n      }\r\n      border: 0.1em solid $gridGreen;\r\n      animation: monitorGlow 0.4s steps(100) infinite;\r\n      @include media(\">425px\") {\r\n        &:hover {\r\n          background-color: $gridGreen;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","@import \"/node_modules/include-media/dist/_include-media.scss\";\r\n\r\n.placeShips {\r\n  @include media(\"<=425px\") {\r\n    flex-direction: column;\r\n  }\r\n  @include flexBox(center, center);\r\n  width: min-content;\r\n  margin: 3% auto;\r\n\r\n  .placeShipsInfo {\r\n    background-color: $infoGrey;\r\n    height: max-content;\r\n    padding: 4%;\r\n    @include borderRadius(5px, 0, 0, 5px);\r\n    @include boxShadow(\r\n      inset -7px 0 10px -7px rgba(0, 0, 0, 0.7),\r\n      -3px 4px 15px -3px rgba(0, 0, 0, 0.6)\r\n    );\r\n    @include media(\"<=425px\") {\r\n      width: 85%;\r\n      @include borderRadius(5px, 5px, 0, 0);\r\n      @include boxShadow(\r\n        inset 0 -7px 10px -7px rgba(0, 0, 0, 0.8),\r\n        -3px 4px 15px -3px rgba(0, 0, 0, 0.6)\r\n      );\r\n    }\r\n\r\n    .ships {\r\n      margin: 1%;\r\n      .ship {\r\n        @include flexBox(center, flex-end);\r\n        margin-top: 1vh;\r\n        position: relative;\r\n        width: min-content;\r\n\r\n        .shipItem {\r\n          color: transparent;\r\n          border: 0.1rem solid white;\r\n          background-color: lightgray;\r\n          width: 4vh;\r\n          height: 4vh;\r\n          @include media(\"<=425px\") {\r\n            width: 2.5vh;\r\n            height: 2.5vh;\r\n          }\r\n        }\r\n        .currentShip {\r\n          transform: scale(1.1);\r\n          background-color: orange;\r\n          @include boxShadow(0 0 0.3rem white, 0 0 0.3rem inset white);\r\n        }\r\n        .shipName {\r\n          @include flexBox(center, center);\r\n          position: absolute;\r\n          z-index: 99999;\r\n          height: 100%;\r\n          width: 100%;\r\n          color: transparent;\r\n          &:hover {\r\n            background-color: rgba(0, 0, 0, 0.6);\r\n            color: white;\r\n          }\r\n          p {\r\n            text-transform: uppercase;\r\n            letter-spacing: 0.05rem;\r\n            font-size: 0.7rem;\r\n          }\r\n        }\r\n        img {\r\n          position: absolute;\r\n          z-index: 99999;\r\n          max-height: 100%;\r\n          max-width: 100%;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  button {\r\n    width: 100%;\r\n    margin-top: 2%;\r\n    position: relative;\r\n    z-index: 1;\r\n    overflow: hidden;\r\n    &::after {\r\n      content: \"\";\r\n      background: darken($infoGrey, 7%);\r\n      position: absolute;\r\n      z-index: -1;\r\n      display: block;\r\n      transition: all 0.35s;\r\n    }\r\n    &[class^=\"slide\"]:hover::after {\r\n      left: 0;\r\n      right: 0;\r\n      top: 0;\r\n      bottom: 0;\r\n      transition: all 0.35s;\r\n    }\r\n    &.slide_horizontal::after {\r\n      top: 0;\r\n      bottom: 0;\r\n      left: -100%;\r\n      right: 100%;\r\n    }\r\n    &.slide_vertical::after {\r\n      left: 0;\r\n      right: 0;\r\n      top: 100%;\r\n      bottom: -100%;\r\n    }\r\n  }\r\n}\r\n",".overlay {\r\n  display: none;\r\n  background-color: rgba(0, 0, 0, 0.6);\r\n  width: 100vw;\r\n  height: 100vh;\r\n  top: 0;\r\n  left: 0;\r\n  position: fixed;\r\n  z-index: 9999;\r\n  .playAgain {\r\n    @include borderRadius(5px);\r\n    margin: 0 auto;\r\n    background-color: $infoGrey;\r\n    padding: 4%;\r\n    width: fit-content;\r\n    position: absolute;\r\n    left: 50%;\r\n    top: 50%;\r\n    transform: translate(-50%, -50%);\r\n    button {\r\n      margin: 0 2% 0 2%;\r\n      &:hover {\r\n        transform: scale(1.1);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n.show {\r\n  display: block;\r\n}\r\n","@import \"./variables\";\r\n@import \"./animations\";\r\n@import \"./mixins\";\r\n@import \"./infoBoard\";\r\n@import \"./gameboards\";\r\n@import \"./placeShips\";\r\n@import \"./playAgain\";\r\n@import \"/node_modules/include-media/dist/_include-media.scss\";\r\n\r\nhtml,\r\nbody {\r\n  height: 100vh;\r\n  width: 100vw;\r\n  margin: 0;\r\n  background: radial-gradient(circle at center, $bckgrndClr, black);\r\n}\r\n\r\n.app {\r\n  font-family: $mainFont;\r\n  box-sizing: border-box;\r\n  text-align: center;\r\n  color: white;\r\n}\r\n\r\ndiv {\r\n  margin: 0;\r\n}\r\n\r\nh1 {\r\n  font-family: $headlineFont;\r\n  font-size: 9.2vw;\r\n  text-transform: uppercase;\r\n  margin: 0;\r\n  background: -webkit-linear-gradient(#e1ff5c, rgb(194, 18, 18));\r\n  background-clip: text;\r\n  -webkit-background-clip: text;\r\n  -webkit-text-fill-color: transparent;\r\n  -webkit-text-stroke: 0.01em black;\r\n}\r\n\r\nh2 {\r\n  letter-spacing: 0.1em;\r\n  font-size: 20px;\r\n  margin: 0;\r\n  text-transform: uppercase;\r\n  margin-bottom: 1vw;\r\n  @include media(\">425px\", \"<=1024px\") {\r\n    font-size: 14px;\r\n  }\r\n  @include media(\"<=425px\") {\r\n    font-size: 10px;\r\n  }\r\n}\r\n\r\np {\r\n  margin: 0;\r\n  font-size: 16px;\r\n  @include media(\"<=1024px\") {\r\n    font-size: 10px;\r\n  }\r\n}\r\n\r\nbutton {\r\n  height: min-content;\r\n  text-transform: uppercase;\r\n  font-family: $mainFont;\r\n  font-size: 16px;\r\n  padding: 2%;\r\n  color: white;\r\n  background-color: $infoGrey;\r\n  @include shadedBorders(0.3rem, $infoGrey, false);\r\n  outline: none;\r\n  &:hover {\r\n    cursor: pointer;\r\n    color: orange;\r\n  }\r\n}\r\n"]}